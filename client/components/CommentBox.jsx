import React from 'react';
import {connect} from 'react-redux';
import {Link} from 'react-router';
import {Button, Glyphicon, ListGroupItem, Popover, OverlayTrigger} from 'react-bootstrap';
import ReactMarkdown from 'react-markdown';

import PostDelete from './PostDelete.jsx';
import Utils from '../utils/utils.js';


var Comment = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

export class CommentBox extends React.Component{
  loadCommentsFromServer() {
    // $.ajax({
    //   url: this.props.url,
    //   dataType: 'json',
    //   cache: false,
    //   success: function(data) {
    //     this.setState({data: data});
    //   }.bind(this),
    //   error: function(xhr, status, err) {
    //     console.error(this.props.url, status, err.toString());
    //   }.bind(this)
    // });
  }
  getInitialState() {
    return {postId:'', data: []};
  }
 // componentDidMount: function() {
//    this.loadCommentsFromServer();
//    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
//  },
  render() {
      return(
          <div>
              <h1>Comments</h1>
          </div>
      )
    // return (
    //   <div className="commentBox">
    //     <h1>Comments</h1>
    //     <CommentForm postId={this.props.postId}/>
    //   </div>
    // )
  }
}

// var CommentList = React.createClass({
//   render: function() {
//     var commentNodes = this.props.data.map(function(comment) {
//       return (
//         <Comment author={comment.author} key={comment.id}>
//           {comment.text}
//         </Comment>
//       );
//     });
//     return (
//       <div className="commentList">
//         {commentNodes}
//       </div>
//     );
//   }
// });

var CommentForm = React.createClass({
    getInitialState: function() {
        return {author: '', text: '', postId: '', authorId: '', postId:''};
    },
    // handleCommentSubmit: function(comment) {
    //   var comments = this.state.data;
    //   console.log(comments);
      // Optimistically set an id on the new comment. It will be replaced by an
      // id generated by the server. In a production application you would likely
      // not use Date.now() for this and would have a more robust system in place.
      //comment.id = Date.now();
  //    var newComments = comments.concat([comment]);
  //    this.setState({data: newComments});
      // $.ajax({
      //   url: this.props.url,
      //   dataType: 'json',
      //   type: 'POST',
      //   data: comment,
      //   success: function(data) {
      //     this.setState({data: data});
      //   }.bind(this),
      //   error: function(xhr, status, err) {
      //     this.setState({data: comments});
      //     console.error(this.props.url, status, err.toString());
      //   }.bind(this)
      // });

    handleTextChange: function(e) {
        this.setState({text: e.target.value});
    },
    handleSubmit: function(e) {
        e.preventDefault();
        var postId = this.props.postId;
        var author = Utils.getAuthor().displayName;
        var authorId = Utils.getAuthor().id;
        var text = this.state.text.trim();

        console.log("Can you get PostID --> " + this.props.postId);

        if (!text) {
            return;
        }

        this.dispatch({
            type: "commentsAddComment",
            postId : postId,
            author : author,
            authorId : authorId,
            content : text,
        });

        this.setState({author: '', text: '', postId: '', authorId: '', postId:''});
    },
    render: function() {
        return (
          <form className="commentForm" onSubmit={this.handleSubmit}>
            <input
              type="text"
              placeholder="Write some comments"
              value={this.state.text}
              onChange={this.handleTextChange}
            />
            <input type="submit" value="Post" />
          </form>
        );
    }
});
